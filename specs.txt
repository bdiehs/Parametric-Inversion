Specs for param inv

exp ::= f exp exp // e.g. exp + exp 
exp ::= f exp // e.g. exp^2
exp ::= var

For actual parsing, we'll include parenthesis and maybe few more grammar elements. Unless there's already something that does the job

Algorithm is as follows:
First, we add temps where needed so that any line of code is like the following
- var = f var1 var2
- var = f var1
- var = const

We will keep track of all the variables and temps 
Then, for each statement, we simply invert it as usual
- var1, var2 = f^{-1}(var, th)
- var1 = f^{-1}(var, th)

We will then go from the last line towards the first line
Also, since var is declared, we take all the places where var was used and make a dupl_n(var) = (var, ..., var) Then, we reset all the uses of var
Note that this, in fact, allows us to not waste memory on temporaries because they will disappear after we see its declaration when going upwards

